package com.lvfulo.controller.upload;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;

import com.lvfulo.utils.ToolUtils;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

public class bsae64 {
	public static void main(String[] args) {
		// 测试从Base64编码转换为图片文件
		String strImg = "";
		GenerateImage(strImg, "E:\\wangyc.jpg");

		// 测试从图片文件转换为Base64编码
		System.out.println(GetImageStr("E:\\wangyc.jpg"));
	}

	// 创建路径
	public static File uploadFile(String filepath, String filename) throws IOException {
		String daString = ToolUtils.GetFmtDate(new Date(), "yyyyMMdd")+"/";
		filepath += daString;
		File tempFile = new File(filepath, new Date().getTime() + String.valueOf(filename));
		if (!tempFile.exists()) {
			tempFile.mkdirs();
		}
		return tempFile;
	}

	public static String GetImageStr(String imgFilePath) {// 将图片文件转化为字节数组字符串，并对其进行Base64编码处理
		byte[] data = null;

		// 读取图片字节数组
		try {
			InputStream in = new FileInputStream(imgFilePath);
			data = new byte[in.available()];
			in.read(data);
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		// 对字节数组Base64编码
		BASE64Encoder encoder = new BASE64Encoder();
		return encoder.encode(data);// 返回Base64编码过的字节数组字符串
	}

	public static boolean GenerateImage(String imgStr, String imgFilePath) {// 对字节数组字符串进行Base64解码并生成图片
		if (imgStr == null) // 图像数据为空
			return false;
		BASE64Decoder decoder = new BASE64Decoder();
		try {
			// Base64解码
			byte[] bytes = decoder.decodeBuffer(imgStr);
			for (int i = 0; i < bytes.length; ++i) {
				if (bytes[i] < 0) {// 调整异常数据
					bytes[i] += 256;
				}
			}
			// 生成jpeg图片
			OutputStream out = new FileOutputStream(imgFilePath);
			out.write(bytes);
			out.flush();
			out.close();
			return true;
		} catch (Exception e) {
			return false;
		}
	}
}